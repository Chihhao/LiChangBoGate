create table "public"."logs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "user_email" text,
    "command" text,
    "status" text,
    "details" text
);


alter table "public"."logs" enable row level security;

CREATE UNIQUE INDEX logs_pkey ON public.logs USING btree (id);

alter table "public"."logs" add constraint "logs_pkey" PRIMARY KEY using index "logs_pkey";

alter table "public"."logs" add constraint "logs_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE SET NULL not valid;

alter table "public"."logs" validate constraint "logs_user_id_fkey";

create policy "Allow admins to read all logs"
on "public"."logs"
as permissive
for select
to authenticated
using ((EXISTS ( SELECT 1
   FROM whitelist
  WHERE ((whitelist.email = auth.email()) AND (whitelist.is_admin = true)))));


create policy "Allow service_role to insert"
on "public"."logs"
as permissive
for insert
to service_role
with check (true);




